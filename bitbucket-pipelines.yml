image: node:16

pipelines:
  branches:
    dev:
      - step:
          caches:
            - docker
          services:
            - docker
          script:
            - git config --global user.email "$GIT_USER_EMAIL"
            - git config --global user.name "$GIT_USER_NAME"
            - git remote set-url origin $BITBUCKET_GIT_SSH_ORIGIN
            - npm version prerelease -m "Bump version to %s [skip ci]" --force
            - export VERSION=`grep version package.json | awk '{print $2}' | sed 's/.$//' | sed 's/"//g'`
            - export IMAGE_NAME=aaadocker/aaa-data:$VERSION
            - echo $VERSION > version.txt
            # authenticate with the Docker Hub registry
            - docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_PASSWORD
            # build the Docker image (this will use the Dockerfile in the root of the repo)
            # When use private NPM package, we need to pass NPM token
            - docker build -t $IMAGE_NAME --build-arg NPM_TOKEN=$NPM_TOKEN .
            # push the new Docker image to the Docker registry
            - docker push $IMAGE_NAME
            - docker tag $IMAGE_NAME aaadocker/aaa-data:latest
            - docker push aaadocker/aaa-data:latest
            - git push && git push --tags
          artifacts: # defining the artifacts to be passed to each future step.
            - version.txt
      - step:
          caches:
            - docker
          services:
            - docker
          name: Deploy to Octopus
          image: octopusdeploy/octo
          script:
            - rm -rf .git
            - apk --update add zip
            - export VERSION=`cat version.txt`
            - export IMAGE_NAME="aaadocker\/aaa-data:$VERSION"
            - sed -i "s/IMAGENAME/${IMAGE_NAME}/g" ./ecs_config.yaml
            - find . -type d -exec chmod 755 {} \;
            - find . -type f -exec chmod 644 {} \;
            - zip -r /tmp/$BITBUCKET_REPO_SLUG.$VERSION.zip ./ecs_config.yaml
            - octo push --package /tmp/$BITBUCKET_REPO_SLUG.$VERSION.zip --server $OCTOPUS_SERVER_URL --apiKey $OCTOPUS_API_KEY --space Spaces-2 --replace-existing
            - octo create-release --space Spaces-2 --project data.service --packageVersion $VERSION --server $OCTOPUS_SERVER_URL --apiKey $OCTOPUS_API_KEY --channel=DevOnly
    main:
      - step:
          caches:
            - docker
          services:
            - docker
          script:
            - git config --global user.email "$GIT_USER_EMAIL"
            - git config --global user.name "$GIT_USER_NAME"
            - git remote set-url origin $BITBUCKET_GIT_SSH_ORIGIN
            - npm version patch -m "Bump version to %s [skip ci]" --force
            - export VERSION=`grep version package.json | awk '{print $2}' | sed 's/.$//' | sed 's/"//g'`
            - export IMAGE_NAME=aaadocker/aaa-data:$VERSION
            - echo $VERSION > version.txt
            # authenticate with the Docker Hub registry
            - docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_PASSWORD
            # build the Docker image (this will use the Dockerfile in the root of the repo)
            # When use private NPM package, we need to pass NPM token
            - docker build -t $IMAGE_NAME --build-arg NPM_TOKEN=$NPM_TOKEN .
            # push the new Docker image to the Docker registry
            - docker push $IMAGE_NAME
            - docker tag $IMAGE_NAME aaadocker/aaa-data:latest
            - docker push aaadocker/aaa-data:latest
            - git push && git push --tags
          artifacts: # defining the artifacts to be passed to each future step.
            - version.txt
      - step:
          caches:
            - docker
          services:
            - docker
          name: Deploy to Octopus
          image: octopusdeploy/octo
          script:
            - rm -rf .git
            - apk --update add zip
            - export VERSION=`cat version.txt`
            - export IMAGE_NAME="aaadocker\/aaa-data:$VERSION"
            - sed -i "s/IMAGENAME/${IMAGE_NAME}/g" ./ecs_config.yaml
            - find . -type d -exec chmod 755 {} \;
            - find . -type f -exec chmod 644 {} \;
            - zip -r /tmp/$BITBUCKET_REPO_SLUG.$VERSION.zip ./ecs_config.yaml
            - octo push --package /tmp/$BITBUCKET_REPO_SLUG.$VERSION.zip --server $OCTOPUS_SERVER_URL --apiKey $OCTOPUS_API_KEY --space Spaces-2 --replace-existing
            - octo create-release --space Spaces-2 --project data.service --packageVersion $VERSION --server $OCTOPUS_SERVER_URL --apiKey $OCTOPUS_API_KEY --channel=Default
      - step:
          script:
            - git config --global user.email "$GIT_USER_EMAIL"
            - git config --global user.name "$GIT_USER_NAME"
            - git remote set-url origin $BITBUCKET_GIT_SSH_ORIGIN
            - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            - export VERSION=`cat version.txt`
            - git fetch origin && git branch -avv && git checkout main
            - git pull origin main
            - git checkout dev
            - apt-get update
            - apt-get install jq -y
            - jq --arg a "$VERSION" '.version = $a' package.json > /tmp/package.json && mv /tmp/package.json package.json && jq . package.json
            - git add .
            - git commit -m "auto merge package.json version"
            - git merge main
            - git push --tags origin dev
    "**":
      - step:
          caches:
            - node
          script:
            - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
            - npm install
            - rm -f .npmrc
            - npx prisma generate
            - npm run build:test
            - npm run test
definitions:
  services:
    docker:
      memory: 3000
